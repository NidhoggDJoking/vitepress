import{_ as d,o,c,b as t,d as e,e as r,a as s,r as n}from"./app.803988e9.js";const b=JSON.parse('{"title":"Vue 源码解析","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"Vue2","slug":"vue2","link":"#vue2","children":[]},{"level":2,"title":"Vue3","slug":"vue3","link":"#vue3","children":[]}],"relativePath":"note/vue.md","lastUpdated":1702166267000}'),u={name:"note/vue.md"},i={id:"vue-源码解析",tabindex:"-1"},l=t("a",{class:"header-anchor",href:"#vue-源码解析","aria-hidden":"true"},"#",-1),_=s('<hr><h2 id="vue2" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2" aria-hidden="true">#</a></h2><hr><h2 id="vue3" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3" aria-hidden="true">#</a></h2><details class="details custom-block"><summary>Vue3 相对 Vue2 有以下性能上的优化：</summary><p>1.更快的渲染速度：<code>Vue3</code> 中引入了新的响应式系统<code>Proxy</code>，它比 <code>Vue2</code> 的 <code>Object.defineProperty()</code> 实现更快，能够提高组件的渲染性能。</p><p>2.更小的包大小：<code>Vue3</code> 使用 <code>Tree-shaking</code> 技术，打包时只会将用到的代码打入最终 <code>bundle</code>，使得包的大小更小，减少了用户加载和解析的时间。</p><p>3.更少的内存占用：<code>Vue3</code> 在渲染组件时使用了更少的内部对象，避免了过多对象的创建和回收，减少了内存占用。</p><p>4.静态节点提取：<code>Vue3</code> 通过编译阶段对静态节点的分析，可以在运行时跳过对这些节点的处理，减少了不必要的计算。</p></details><p>对于一段固定的HTML Vue3不再生成虚拟DOM而是编译时转换成一段String</p>',6);function h(p,V,v,m,f,x){const a=n("Badge");return o(),c("div",null,[t("h1",i,[e("Vue 源码解析"),r(a,{type:"tip",text:"八股文"}),e(),l]),_])}const g=d(u,[["render",h]]);export{b as __pageData,g as default};
